/*
 * THIS IS A GENERATED FILE!  DO NOT CHANGE THIS FILE!  CHANGE THE
 * CORRESPONDING TEMPLATE FILE, PLEASE!
 */

#include <shogun/base/SGObject.h>
#include <shogun/base/class_list.h>
#include <shogun/io/SerializableHdf5File.h>
#include <unistd.h>
#include <gtest/gtest.h>

using namespace shogun;

#ifdef HAVE_HDF5

{% for class in classes %}
TEST(SerializationHDF5, {{class}})
{
	std::string class_name("{{class}}");
	std::string file_template = "/tmp/" + class_name + ".XXXXXX";
	char* filename = mktemp(const_cast<char*>(file_template.c_str()));
	CSGObject* object = new_sgserializable(class_name.c_str(), PT_NOT_GENERIC);
	ASSERT_TRUE(object != NULL);

	// save object to an ascii file
	CSerializableHdf5File *file=new CSerializableHdf5File(filename, 'w');
	object->save_serializable(file);
	file->close();
	SG_UNREF(file);

	// load parameter from an ascii file
	file=new CSerializableHdf5File(filename, 'r');
	CSGObject* deserializedObject = new_sgserializable(class_name.c_str(), PT_NOT_GENERIC);
	ASSERT_TRUE(deserializedObject != NULL);
	deserializedObject->load_serializable(file);
	file->close();
	SG_UNREF(file);

	// check whether they are equal
	ASSERT_TRUE(object->equals(deserializedObject));
	
	SG_UNREF(object)
	SG_UNREF(deserializedObject);
}
{% endfor %}

{% for class in template_classes %}
{% for type in types %}
TEST(SerializationHDF5,{{class}}_{{type}})
{
	std::string class_name("{{class}}");
	std::string file_template = "/tmp/" + class_name + "_{{type}}" + ".XXXXXX";
	char* filename = mktemp(const_cast<char*>(file_template.c_str()));
	CSGObject* object = new_sgserializable(class_name.c_str(), {{type}});
	ASSERT_TRUE(object != NULL);

	// save object to an ascii file
	CSerializableHdf5File *file=new CSerializableHdf5File(filename, 'w');
	object->save_serializable(file);
	file->close();
	SG_UNREF(file);

	// load parameter from an ascii file
	file=new CSerializableHdf5File(filename, 'r');
	CSGObject* deserializedObject = new_sgserializable(class_name.c_str(), {{type}});
	ASSERT_TRUE(deserializedObject != NULL);
	deserializedObject->load_serializable(file);
	file->close();
	SG_UNREF(file);

	// check whether they are equal
	ASSERT_TRUE(object->equals(deserializedObject));
	
	SG_UNREF(object)
	SG_UNREF(deserializedObject);

}
{% endfor %}
{% endfor %}

#endif /* HAVE_HDF5 */
