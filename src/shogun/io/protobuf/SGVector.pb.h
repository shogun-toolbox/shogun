// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SGVector.proto

#ifndef PROTOBUF_SGVector_2eproto__INCLUDED
#define PROTOBUF_SGVector_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace shogun {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SGVector_2eproto();
void protobuf_AssignDesc_SGVector_2eproto();
void protobuf_ShutdownFile_SGVector_2eproto();

class SGVectorHeaderProto;
class SGVectorChunkProto;

// ===================================================================

class SGVectorHeaderProto : public ::google::protobuf::Message {
 public:
  SGVectorHeaderProto();
  virtual ~SGVectorHeaderProto();

  SGVectorHeaderProto(const SGVectorHeaderProto& from);

  inline SGVectorHeaderProto& operator=(const SGVectorHeaderProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SGVectorHeaderProto& default_instance();

  void Swap(SGVectorHeaderProto* other);

  // implements Message ----------------------------------------------

  SGVectorHeaderProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SGVectorHeaderProto& from);
  void MergeFrom(const SGVectorHeaderProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 vlen = 1;
  inline bool has_vlen() const;
  inline void clear_vlen();
  static const int kVlenFieldNumber = 1;
  inline ::google::protobuf::uint32 vlen() const;
  inline void set_vlen(::google::protobuf::uint32 value);

  // required uint32 num_chunks = 2;
  inline bool has_num_chunks() const;
  inline void clear_num_chunks();
  static const int kNumChunksFieldNumber = 2;
  inline ::google::protobuf::uint32 num_chunks() const;
  inline void set_num_chunks(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:shogun.SGVectorHeaderProto)
 private:
  inline void set_has_vlen();
  inline void clear_has_vlen();
  inline void set_has_num_chunks();
  inline void clear_has_num_chunks();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 vlen_;
  ::google::protobuf::uint32 num_chunks_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SGVector_2eproto();
  friend void protobuf_AssignDesc_SGVector_2eproto();
  friend void protobuf_ShutdownFile_SGVector_2eproto();

  void InitAsDefaultInstance();
  static SGVectorHeaderProto* default_instance_;
};
// -------------------------------------------------------------------

class SGVectorChunkProto : public ::google::protobuf::Message {
 public:
  SGVectorChunkProto();
  virtual ~SGVectorChunkProto();

  SGVectorChunkProto(const SGVectorChunkProto& from);

  inline SGVectorChunkProto& operator=(const SGVectorChunkProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SGVectorChunkProto& default_instance();

  void Swap(SGVectorChunkProto* other);

  // implements Message ----------------------------------------------

  SGVectorChunkProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SGVectorChunkProto& from);
  void MergeFrom(const SGVectorChunkProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline ::google::protobuf::int32 data(int index) const;
  inline void set_data(int index, ::google::protobuf::int32 value);
  inline void add_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:shogun.SGVectorChunkProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SGVector_2eproto();
  friend void protobuf_AssignDesc_SGVector_2eproto();
  friend void protobuf_ShutdownFile_SGVector_2eproto();

  void InitAsDefaultInstance();
  static SGVectorChunkProto* default_instance_;
};
// ===================================================================


// ===================================================================

// SGVectorHeaderProto

// required uint32 vlen = 1;
inline bool SGVectorHeaderProto::has_vlen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SGVectorHeaderProto::set_has_vlen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SGVectorHeaderProto::clear_has_vlen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SGVectorHeaderProto::clear_vlen() {
  vlen_ = 0u;
  clear_has_vlen();
}
inline ::google::protobuf::uint32 SGVectorHeaderProto::vlen() const {
  return vlen_;
}
inline void SGVectorHeaderProto::set_vlen(::google::protobuf::uint32 value) {
  set_has_vlen();
  vlen_ = value;
}

// required uint32 num_chunks = 2;
inline bool SGVectorHeaderProto::has_num_chunks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SGVectorHeaderProto::set_has_num_chunks() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SGVectorHeaderProto::clear_has_num_chunks() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SGVectorHeaderProto::clear_num_chunks() {
  num_chunks_ = 0u;
  clear_has_num_chunks();
}
inline ::google::protobuf::uint32 SGVectorHeaderProto::num_chunks() const {
  return num_chunks_;
}
inline void SGVectorHeaderProto::set_num_chunks(::google::protobuf::uint32 value) {
  set_has_num_chunks();
  num_chunks_ = value;
}

// -------------------------------------------------------------------

// SGVectorChunkProto

// repeated int32 data = 1;
inline int SGVectorChunkProto::data_size() const {
  return data_.size();
}
inline void SGVectorChunkProto::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::int32 SGVectorChunkProto::data(int index) const {
  return data_.Get(index);
}
inline void SGVectorChunkProto::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
}
inline void SGVectorChunkProto::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SGVectorChunkProto::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SGVectorChunkProto::mutable_data() {
  return &data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace shogun

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SGVector_2eproto__INCLUDED
