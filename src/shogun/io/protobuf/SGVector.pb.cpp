// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SGVector.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SGVector.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace shogun {

namespace {

const ::google::protobuf::Descriptor* SGVectorHeaderProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SGVectorHeaderProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SGVectorChunkProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SGVectorChunkProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SGVector_2eproto() {
  protobuf_AddDesc_SGVector_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SGVector.proto");
  GOOGLE_CHECK(file != NULL);
  SGVectorHeaderProto_descriptor_ = file->message_type(0);
  static const int SGVectorHeaderProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGVectorHeaderProto, vlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGVectorHeaderProto, num_chunks_),
  };
  SGVectorHeaderProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SGVectorHeaderProto_descriptor_,
      SGVectorHeaderProto::default_instance_,
      SGVectorHeaderProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGVectorHeaderProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGVectorHeaderProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SGVectorHeaderProto));
  SGVectorChunkProto_descriptor_ = file->message_type(1);
  static const int SGVectorChunkProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGVectorChunkProto, data_),
  };
  SGVectorChunkProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SGVectorChunkProto_descriptor_,
      SGVectorChunkProto::default_instance_,
      SGVectorChunkProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGVectorChunkProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGVectorChunkProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SGVectorChunkProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SGVector_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SGVectorHeaderProto_descriptor_, &SGVectorHeaderProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SGVectorChunkProto_descriptor_, &SGVectorChunkProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SGVector_2eproto() {
  delete SGVectorHeaderProto::default_instance_;
  delete SGVectorHeaderProto_reflection_;
  delete SGVectorChunkProto::default_instance_;
  delete SGVectorChunkProto_reflection_;
}

void protobuf_AddDesc_SGVector_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016SGVector.proto\022\006shogun\"7\n\023SGVectorHead"
    "erProto\022\014\n\004vlen\030\001 \002(\r\022\022\n\nnum_chunks\030\002 \002("
    "\r\"\"\n\022SGVectorChunkProto\022\014\n\004data\030\001 \003(\005", 117);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SGVector.proto", &protobuf_RegisterTypes);
  SGVectorHeaderProto::default_instance_ = new SGVectorHeaderProto();
  SGVectorChunkProto::default_instance_ = new SGVectorChunkProto();
  SGVectorHeaderProto::default_instance_->InitAsDefaultInstance();
  SGVectorChunkProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SGVector_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SGVector_2eproto {
  StaticDescriptorInitializer_SGVector_2eproto() {
    protobuf_AddDesc_SGVector_2eproto();
  }
} static_descriptor_initializer_SGVector_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SGVectorHeaderProto::kVlenFieldNumber;
const int SGVectorHeaderProto::kNumChunksFieldNumber;
#endif  // !_MSC_VER

SGVectorHeaderProto::SGVectorHeaderProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SGVectorHeaderProto::InitAsDefaultInstance() {
}

SGVectorHeaderProto::SGVectorHeaderProto(const SGVectorHeaderProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SGVectorHeaderProto::SharedCtor() {
  _cached_size_ = 0;
  vlen_ = 0u;
  num_chunks_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGVectorHeaderProto::~SGVectorHeaderProto() {
  SharedDtor();
}

void SGVectorHeaderProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SGVectorHeaderProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SGVectorHeaderProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SGVectorHeaderProto_descriptor_;
}

const SGVectorHeaderProto& SGVectorHeaderProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SGVector_2eproto();
  return *default_instance_;
}

SGVectorHeaderProto* SGVectorHeaderProto::default_instance_ = NULL;

SGVectorHeaderProto* SGVectorHeaderProto::New() const {
  return new SGVectorHeaderProto;
}

void SGVectorHeaderProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vlen_ = 0u;
    num_chunks_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SGVectorHeaderProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 vlen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vlen_)));
          set_has_vlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_chunks;
        break;
      }

      // required uint32 num_chunks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_chunks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_chunks_)));
          set_has_num_chunks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SGVectorHeaderProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 vlen = 1;
  if (has_vlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vlen(), output);
  }

  // required uint32 num_chunks = 2;
  if (has_num_chunks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_chunks(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SGVectorHeaderProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 vlen = 1;
  if (has_vlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vlen(), target);
  }

  // required uint32 num_chunks = 2;
  if (has_num_chunks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_chunks(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SGVectorHeaderProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 vlen = 1;
    if (has_vlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vlen());
    }

    // required uint32 num_chunks = 2;
    if (has_num_chunks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_chunks());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGVectorHeaderProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SGVectorHeaderProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SGVectorHeaderProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SGVectorHeaderProto::MergeFrom(const SGVectorHeaderProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vlen()) {
      set_vlen(from.vlen());
    }
    if (from.has_num_chunks()) {
      set_num_chunks(from.num_chunks());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SGVectorHeaderProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGVectorHeaderProto::CopyFrom(const SGVectorHeaderProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGVectorHeaderProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SGVectorHeaderProto::Swap(SGVectorHeaderProto* other) {
  if (other != this) {
    std::swap(vlen_, other->vlen_);
    std::swap(num_chunks_, other->num_chunks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SGVectorHeaderProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SGVectorHeaderProto_descriptor_;
  metadata.reflection = SGVectorHeaderProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SGVectorChunkProto::kDataFieldNumber;
#endif  // !_MSC_VER

SGVectorChunkProto::SGVectorChunkProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SGVectorChunkProto::InitAsDefaultInstance() {
}

SGVectorChunkProto::SGVectorChunkProto(const SGVectorChunkProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SGVectorChunkProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGVectorChunkProto::~SGVectorChunkProto() {
  SharedDtor();
}

void SGVectorChunkProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SGVectorChunkProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SGVectorChunkProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SGVectorChunkProto_descriptor_;
}

const SGVectorChunkProto& SGVectorChunkProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SGVector_2eproto();
  return *default_instance_;
}

SGVectorChunkProto* SGVectorChunkProto::default_instance_ = NULL;

SGVectorChunkProto* SGVectorChunkProto::New() const {
  return new SGVectorChunkProto;
}

void SGVectorChunkProto::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SGVectorChunkProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SGVectorChunkProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SGVectorChunkProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SGVectorChunkProto::ByteSize() const {
  int total_size = 0;

  // repeated int32 data = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGVectorChunkProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SGVectorChunkProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SGVectorChunkProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SGVectorChunkProto::MergeFrom(const SGVectorChunkProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SGVectorChunkProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGVectorChunkProto::CopyFrom(const SGVectorChunkProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGVectorChunkProto::IsInitialized() const {

  return true;
}

void SGVectorChunkProto::Swap(SGVectorChunkProto* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SGVectorChunkProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SGVectorChunkProto_descriptor_;
  metadata.reflection = SGVectorChunkProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace shogun

// @@protoc_insertion_point(global_scope)
