GaussianBlobsDataGenerator features_p()
GaussianBlobsDataGenerator features_q()

#![create_instance]
LinearTimeMMD mmd()
mmd.set_p(features_p)
mmd.set_q(features_q)
mmd.set_num_samples_p(1000)
mmd.set_num_samples_q(1000)
Kernel k = create_kernel("GaussianKernel", log_width = 1.0)
mmd.set_kernel(k)
real alpha = 0.05
#![create_instance]

#![set_burst]
mmd.set_num_blocks_per_burst(1000)
#![set_burst]

#![estimate_mmd]
real statistic = mmd.compute_statistic()
#![estimate_mmd]

#![perform_test]
real threshold = mmd.compute_threshold(alpha)
real p_value = mmd.compute_p_value(statistic)
#![perform_test]

#![add_kernels]
Kernel kernel1 = create_kernel("GaussianKernel", log_width = -1.0)
Kernel kernel2 = create_kernel("GaussianKernel", log_width = 0.0)
Kernel kernel3 = create_kernel("GaussianKernel", log_width = 1.0)
mmd.add_kernel(kernel1)
mmd.add_kernel(kernel2)
mmd.add_kernel(kernel3)
#![add_kernels]

#![enable_train_test_mode]
mmd.set_train_test_mode(True)
mmd.set_train_test_ratio(1)
#![enable_train_test_mode]

#![select_kernel_single]
mmd.set_kernel_selection_strategy(enum EKernelSelectionMethod.KSM_MAXIMIZE_POWER)
mmd.select_kernel()
Kernel learnt_kernel_single = as_kernel(mmd.get("kernel"))
real width = learnt_kernel_single.get_real("log_width")
#![select_kernel_single]

#![select_kernel_combined]
mmd.set_kernel_selection_strategy(enum EKernelSelectionMethod.KSM_MAXIMIZE_POWER, True)
mmd.select_kernel()
Kernel learnt_kernel_combined = as_kernel(mmd.get("kernel"))
RealVector weights = learnt_kernel_combined.get_real_vector("subkernel_log_weights")
#![select_kernel_combined]

#![perform_test_optimized]
real statistic_optimized = mmd.compute_statistic()
real p_value_optimized = mmd.compute_p_value(statistic)
#![perform_test_optimized]
