File f_features_p = read_csv("@SHOGUN_DATA@/two_sample_test_gaussian.dat")
File f_features_q = read_csv("@SHOGUN_DATA@/two_sample_test_laplace.dat")

#![create_features]
Features features_p = create_features(f_features_p)
Features features_q = create_features(f_features_q)
#![create_features]

#![create_instance]
QuadraticTimeMMD mmd()
mmd.set_p(features_p)
mmd.set_q(features_q)
Kernel k = create_kernel("GaussianKernel", log_width = 1.0)
mmd.set_kernel(k)
real alpha = 0.05
#![create_instance]

#![estimate_mmd]
mmd.set_statistic_type(enum EStatisticType.ST_BIASED_FULL)
real statistic = mmd.compute_statistic()
#![estimate_mmd]

#![perform_test]
mmd.set_null_approximation_method(enum ENullApproximationMethod.NAM_PERMUTATION)
mmd.set_num_null_samples(200)
real threshold = mmd.compute_threshold(alpha)
real p_value = mmd.compute_p_value(statistic)
#![perform_test]

#![add_kernels]
Kernel kernel1 = create_kernel("GaussianKernel", log_width = -1.0)
Kernel kernel2 = create_kernel("GaussianKernel", log_width = 0.0)
Kernel kernel3 = create_kernel("GaussianKernel", log_width = 1.0)
mmd.add_kernel(kernel1)
mmd.add_kernel(kernel2)
mmd.add_kernel(kernel3)
#![add_kernels]

#![multi_kernel]
MultiKernelQuadraticTimeMMD mk = mmd.multikernel()
mk.add_kernel(kernel1)
mk.add_kernel(kernel2)
mk.add_kernel(kernel2)

RealVector mk_statistic = mk.compute_statistic()
RealVector mk_p_value = mk.compute_p_value()
#![multi_kernel]

#![enable_train_test_mode]
mmd.set_train_test_mode(True)
mmd.set_train_test_ratio(1)
#![enable_train_test_mode]

#![select_kernel_single]
int num_runs = 1
int num_folds = 3
mmd.set_kernel_selection_strategy(enum EKernelSelectionMethod.KSM_CROSS_VALIDATION, num_runs, num_folds, alpha)
mmd.select_kernel()
Kernel learnt_kernel_single = as_kernel(mmd.get("kernel"))
real width = learnt_kernel_single.get_real("log_width")
#![select_kernel_single]

#![select_kernel_combined]
mmd.set_kernel_selection_strategy(enum EKernelSelectionMethod.KSM_MAXIMIZE_MMD, True)
mmd.select_kernel()
Kernel learnt_kernel_combined = as_kernel(mmd.get("kernel"))
RealVector weights = learnt_kernel_combined.get_real_vector("subkernel_log_weights")
#![select_kernel_combined]

#![perform_test_optimized]
real statistic_optimized = mmd.compute_statistic()
real p_value_optimized = mmd.compute_p_value(statistic)
#![perform_test_optimized]
