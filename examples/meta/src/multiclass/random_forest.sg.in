File f_feats_train = read_csv("@SHOGUN_DATA@/classifier_4class_2d_linear_features_train.dat")
File f_feats_test = read_csv("@SHOGUN_DATA@/classifier_4class_2d_linear_features_test.dat")
File f_labels_train = read_csv("@SHOGUN_DATA@/classifier_4class_2d_linear_labels_train.dat")
File f_labels_test = read_csv("@SHOGUN_DATA@/classifier_4class_2d_linear_labels_test.dat")

#![create_features]
Features features_train = create_features(f_feats_train)
Features features_test = create_features(f_feats_test) 
Labels labels_train = create_labels(f_labels_train)
Labels labels_test = create_labels(f_labels_test)
#![create_features]

#![create_combination_rule]
CombinationRule m_vote = create_combination_rule("MajorityVote")
#![create_combination_rule]

#![create_instance]
Machine rand_forest = create_machine("RandomForest", num_bags=100, combination_rule=m_vote, seed=1)
Parallel p = rand_forest.get_global_parallel()
p.set_num_threads(1)
#![create_instance]

#![train_and_apply]
rand_forest.train(features_train, labels_train)
MulticlassLabels labels_predict = rand_forest.apply_multiclass(features_test)
#![train_and_apply]

#![feature_importance]
RealVector feat_importance = rand_forest.get_real_vector("feature_importances")
#![feature_importance]

#![evaluate_accuracy]
Evaluation acc = create_evaluation("MulticlassAccuracy")
rand_forest.put("oob_evaluation_metric", acc)
real oob = rand_forest.get_real("oob_error")
real accuracy = acc.evaluate(labels_predict, labels_test)
#![evaluate_accuracy]

# additional integration testing variables
RealVector output = labels_predict.get_labels()

