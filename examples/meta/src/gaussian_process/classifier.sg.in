File f_feats_train = read_csv("@SHOGUN_DATA@/classifier_4class_2d_linear_features_train.dat")
File f_feats_test = read_csv("@SHOGUN_DATA@/classifier_4class_2d_linear_features_test.dat")
File f_labels_train = read_csv("@SHOGUN_DATA@/classifier_4class_2d_linear_labels_train.dat")
File f_labels_test = read_csv("@SHOGUN_DATA@/classifier_4class_2d_linear_labels_test.dat")

#![create_features]
Features features_train = create_features(f_feats_train)
Features features_test = create_features(f_feats_test)
Labels labels_train = create_labels(f_labels_train)
Labels labels_test = create_labels(f_labels_test)
#![create_features]

#![create_appropriate_kernel_and_mean_function]
Kernel k = create_kernel("GaussianKernel", log_width=2.0)
MeanFunction mean_function = create_gp_mean("ConstMean")
#![create_appropriate_kernel_and_mean_function]

#![create_instance]
LikelihoodModel gauss_likelihood = create_gp_likelihood("SoftMaxLikelihood")
Inference inference_method = create_gp_inference("MultiLaplaceInferenceMethod", kernel=k, mean_function=mean_function, likelihood_model=gauss_likelihood)
GaussianProcess gp_classifier = create_gaussian_process("GaussianProcessClassification", inference_method=inference_method, seed=1, labels=labels_train)
#![create_instance]

#![train_and_apply]
gp_classifier.train(features_train)
MulticlassLabels labels_predict = gp_classifier.apply_multiclass(features_test)
#![train_and_apply]

#![extract_the_probabilities]
RealVector prob = gp_classifier.get_probabilities(features_train)
#![extract_the_probabilities]

#![evaluate_accuracy]
Evaluation eval = create_evaluation("MulticlassAccuracy")
real accuracy = eval.evaluate(labels_predict, labels_test)
#![evaluate_accuracy]

# integration testing variables
RealVector output = labels_test.get_real_vector("labels")

