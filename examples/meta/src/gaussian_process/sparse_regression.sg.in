File f_feats_train = read_csv("@SHOGUN_DATA@/regression_1d_sinc_features_train.dat")
File f_feats_inducing = read_csv("@SHOGUN_DATA@/regression_1d_sinc_features_train.dat")
File f_feats_test = read_csv("@SHOGUN_DATA@/regression_1d_sinc_features_test.dat")
File f_labels_train = read_csv("@SHOGUN_DATA@/regression_1d_sinc_labels_train.dat")
File f_labels_test = read_csv("@SHOGUN_DATA@/regression_1d_sinc_labels_test.dat")

#![create_features]
Features features_train = create_features(f_feats_train)
Features features_test = create_features(f_feats_test)
Labels labels_train = create_labels(f_labels_train)
Labels labels_test = create_labels(f_labels_test)
#![create_features]

#![create_kernel_and_mean_function]
Kernel k = create_kernel("GaussianKernel", log_width=0.0)
k.init(features_train, features_train)
MeanFunction mean_function = create_gp_mean("ZeroMean")
#![create_kernel_and_mean_function]

#![create_inference]
IntVector inducing_points(3)
inducing_points[0]=0
inducing_points[1]=1
inducing_points[2]=2
Features inducing_features = create_features(f_feats_inducing)
inducing_features.add_subset(inducing_points)

LikelihoodModel gauss_likelihood = create_gp_likelihood("GaussianLikelihood")
Inference inference_method = create_gp_inference("FITCInferenceMethod", kernel=k, mean_function=mean_function, likelihood_model=gauss_likelihood)
#![create_inference]

#![create_instance]
GaussianProcess gp_regression = create_gaussian_process("GaussianProcessRegression", inference_method=inference_method, labels=labels_train, inducing_features=inducing_features)
#![create_instance]

#![train_and_apply]
gp_regression.train(features_train)
RegressionLabels labels_predict = gp_regression.apply_regression(features_test)
#![train_and_apply]

#![compute_variance]
RealVector variances = gp_regression.get_variance_vector(features_test)
#![compute_variance]

#![evaluate_error]
Evaluation eval = create_evaluation("MeanSquaredError")
real mse = eval.evaluate(labels_predict, labels_test)
#![evaluate_error]

# integration testing variables
RealVector output = labels_test.get_real_vector("labels")
