CSVFile f_feats_train("../../data/regression_1d_sinc_features_train.dat")
CSVFile f_feats_test("../../data/regression_1d_sinc_features_test.dat")
CSVFile f_labels_train("../../data/regression_1d_sinc_labels_train.dat")
CSVFile f_labels_test("../../data/regression_1d_sinc_labels_test.dat")

#![create_features]
Features features_train = features(f_feats_train)
Features features_test = features(f_feats_test)
Labels labels_train = labels(f_labels_train)
Labels labels_test = labels(f_labels_test)
#![create_features]

#![create_appropriate_kernel_and_mean_function]
Kernel k = kernel("GaussianKernel", log_width=0.0)
k.init(features_train, features_train)
MeanFunction mean = gp_mean("ZeroMean")
#![create_appropriate_kernel_and_mean_function]

#![create_instance]
LikelihoodModel gauss_likelihood = gp_likelihood("GaussianLikelihood")
Inference inference_method = gp_inference("ExactInferenceMethod", kernel=k, features=features_train, mean_function=mean, labels=labels_train, likelihood_model=gauss_likelihood)
Machine gp_regression = machine("GaussianProcessRegression", inference_method=inference_method, labels=labels_train, compute_variance=True)
#![create_instance]

#![train_and_apply]
gp_regression.train()
Labels labels_predict = gp_regression.apply(features_test)
#![train_and_apply]

#![compute_variance]
RealVector variances = labels_predict.get_real_vector("current_values")
#![compute_variance]

#![optimize_marginal_likelihood]
Evaluation grad_criterion = evaluation("GradientCriterion")
DifferentiableFunction diff_function = as_differentiable(inference_method)
MachineEvaluation grad = machine_evaluation("GradientEvaluation", machine=gp_regression, features=features_train, labels=labels_train, evaluation_criterion=grad_criterion, differentiable_function=diff_function)
GradientModelSelection grad_selection(grad)
ParameterCombination best_theta = grad_selection.select_model()
best_theta.apply_to_machine(gp_regression)
#![optimize_marginal_likelihood]

#![evaluate_error_and_marginal_likelihood]
MeanSquaredError eval()
real mse = eval.evaluate(labels_predict, labels_test)
real marg_ll = inference_method.get_negative_log_marginal_likelihood()
#![evaluate_error_and_marginal_likelihood]

# integration testing variables
RealVector output = labels_test.get_real_vector("labels")
