File f_feats_train = csv_file("../../data/regression_1d_linear_features_train.dat")
File f_feats_test = csv_file("../../data/regression_1d_linear_features_test.dat")
File f_labels_train = csv_file("../../data/regression_1d_linear_labels_train.dat")
File f_labels_test = csv_file("../../data/regression_1d_linear_labels_test.dat")

#![create_features]
Features features_train = features(f_feats_train)
Features features_test = features(f_feats_test)
Labels labels_train = labels(f_labels_train)
Labels labels_test = labels(f_labels_test)
#![create_features]

#![preprocess_features]
PruneVarSubMean SubMean()
NormOne Normalize()
SubMean.fit(features_train)
SubMean.apply_to_feature_matrix(features_train)
SubMean.apply_to_feature_matrix(features_test)
Normalize.fit(features_train)
Normalize.apply_to_feature_matrix(features_train)
Normalize.apply_to_feature_matrix(features_test)	
#![preprocess_features]

#![create_instance]
Machine lars = machine("LeastAngleRegression", labels=labels_train, lasso=False, max_l1_norm=0.01)
#![create_instance]

#![train_and_apply]
lars.train(features_train)
Labels labels_predict = lars.apply(features_test)

#[!extract_w]
RealVector weights = lars.get_real_vector("w")
#[!extract_w]

#![evaluate_error]
Evaluation eval = evaluation("MeanSquaredError")
real mse = eval.evaluate(labels_predict, labels_test)
#![evaluate_error]

# integration testing variables
RealVector output = labels_predict.get_real_vector("labels")
