File f_feats_train = read_csv("@SHOGUN_DATA@/classifier_binary_2d_nonlinear_features_train.dat")
File f_feats_test = read_csv("@SHOGUN_DATA@/classifier_binary_2d_nonlinear_features_test.dat")
File f_labels_train = read_csv("@SHOGUN_DATA@/classifier_binary_2d_nonlinear_labels_train.dat")
File f_labels_test = read_csv("@SHOGUN_DATA@/classifier_binary_2d_nonlinear_labels_test.dat")

#![create_features]
Features features_train = create_features(f_feats_train)
Features features_test = create_features(f_feats_test)
Labels labels_train = create_labels(f_labels_train)
Labels labels_test = create_labels(f_labels_test)
#![create_features]

#![create_instance]
int num_feats = features_train.get_int("num_features")
Machine network = create_machine("NeuralNetwork", auto_quick_initialize=True, l2_coefficient=0.01, dropout_hidden=0.5, max_num_epochs=50, gd_mini_batch_size=num_feats, gd_learning_rate=0.1, gd_momentum=0.9)
#![create_instance]

#![add_layers]
NeuralLayer input = create_layer("NeuralInputLayer", num_neurons=num_feats)
network.add("layers", input)
NeuralLayer relu = create_layer("NeuralRectifiedLinearLayer", num_neurons=10)
network.add("layers", relu)
NeuralLayer softmax = create_layer("NeuralSoftmaxLayer", num_neurons=2)
network.add("layers", softmax)
network.put("seed", 1)
#![add_layers]

#![train_and_apply]
network.train(features_train, labels_train)
Labels labels_predict = network.apply(features_test)
#![train_and_apply]

#![get_params]
RealVector parameters = network.get_real_vector("params")
#![get_params]

#![evaluate_accuracy]
Evaluation eval = create_evaluation("AccuracyMeasure")
real accuracy = eval.evaluate(labels_predict, labels_test)
#![evaluate_accuracy]

# additional integration testing variables
RealVector output = labels_predict.get_real_vector("labels")
