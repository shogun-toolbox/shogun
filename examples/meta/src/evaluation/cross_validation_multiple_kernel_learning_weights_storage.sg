File f_feats = csv_file("../../data/fm_train_real.dat")
File f_labels = csv_file("../../data/label_train_twoclass.dat")

#![create_features]
Features feats = features(f_feats)
Features combined_features = features("CombinedFeatures")
combined_features.add("feature_array", feats)
combined_features.add("feature_array", feats)
combined_features.add("feature_array", feats)
Labels labels_train = labels(f_labels)
#![create_features]

#![create_kernels]
Kernel combined_kernel = kernel("CombinedKernel")
Kernel k_1 = kernel("GaussianKernel", log_width=0.1)
Kernel k_2 = kernel("GaussianKernel", log_width=1.0)
Kernel k_3 = kernel("GaussianKernel", log_width=2.0)
combined_kernel.add("kernel_array", k_1)
combined_kernel.add("kernel_array", k_2)
combined_kernel.add("kernel_array", k_3)
#![create_kernels]

#![create_classifier]
SVM libsvm = as_svm(machine("LibSVM"))
Machine svm = machine("MKLClassification", kernel=combined_kernel, interleaved_optimization=False, svm=libsvm)
#![create_classifier]

#![create_cross_validation]
SplittingStrategy strategy = splitting_strategy("StratifiedCrossValidationSplitting", labels=labels_train, num_subsets=5)
Evaluation evaluation_criterium = evaluation("AccuracyMeasure")
MachineEvaluation cross = machine_evaluation("CrossValidation", machine=svm, features=combined_features, labels=labels_train, splitting_strategy=strategy, evaluation_criterion=evaluation_criterium, autolock=False, num_runs=2)
#![create_cross_validation]

#![create_observer]
ParameterObserverCV mkl_obs(True)
cross.subscribe_to_parameters(mkl_obs)
#[!create_observer]

#![evaluate_and_get_result]
EvaluationResult result = cross.evaluate()
#![evaluate_and_get_result]

#![get_results]
real mean = result.get_real("mean")
real stddev = result.get_real("std_dev")
#![get_results]

#![get_fold_machine]
CrossValidationStorage obs = mkl_obs.get_observation(0)
CrossValidationFoldStorage fold = obs.get_fold(0)
Machine machine_mkl = as_machine(fold.get_trained_machine())

#![get_fold_machine]

#![get_weights]
Kernel k = as_kernel(machine_mkl.get("kernel"))
RealVector w = k.get_subkernel_weights()
#![get_weights]
