File f_feats_train = read_csv("@SHOGUN_DATA@/classifier_binary_2d_nonlinear_features_train.dat")
File f_feats_test = read_csv("@SHOGUN_DATA@/classifier_binary_2d_nonlinear_features_test.dat")
File f_labels_train = read_csv("@SHOGUN_DATA@/classifier_binary_2d_nonlinear_labels_train.dat")
File f_labels_test = read_csv("@SHOGUN_DATA@/classifier_binary_2d_nonlinear_labels_test.dat")

#![create_features]
Features features_train = create_features(f_feats_train)
Features features_test = create_features(f_feats_test)
Labels labels_train = create_labels(f_labels_train)
Labels labels_test = create_labels(f_labels_test)
#![create_features]

#![create_kernel]
Kernel poly_kernel = create_kernel("PolyKernel", degree=2)
Kernel gauss_kernel_1 = create_kernel("GaussianKernel", log_width=0.0)
Kernel gauss_kernel_2 = create_kernel("GaussianKernel", log_width=1.0)
#![create_kernel]

#![create_combined_train]
Kernel combined_kernel = create_kernel("CombinedKernel")
combined_kernel.add("kernel_array", poly_kernel)
combined_kernel.add("kernel_array", gauss_kernel_1)
combined_kernel.add("kernel_array", gauss_kernel_2)
combined_kernel.init(features_train, features_train)
#![create_combined_train]

#![train_mkl]
Machine mkl = create_machine("MKLClassification", kernel=combined_kernel, labels=labels_train)
mkl.train()
#![train_mkl]

#![extract_weights]
RealVector beta = combined_kernel.get_subkernel_weights()
RealVector alpha = mkl.get_real_vector("m_alpha")
real bias = mkl.get_real("m_bias")
#![extract_weights]

#![create_combined_test]
combined_kernel.init(features_train, features_test)
#![create_combined_test]

#![mkl_apply]
mkl.put("kernel", combined_kernel)
Labels labels_predict = mkl.apply()
#![mkl_apply]

#![evaluate_accuracy]
Evaluation eval = create_evaluation("AccuracyMeasure")
real accuracy = eval.evaluate(labels_predict, labels_test)
#![evaluate_accuracy]

# additional integration testing variables
RealVector output = labels_predict.get_real_vector("labels")
