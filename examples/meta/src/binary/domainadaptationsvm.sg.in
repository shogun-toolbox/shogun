File f_feats_train = read_csv("@SHOGUN_DATA@/fm_train_dna.dat")
File f_feats_test = read_csv("@SHOGUN_DATA@/fm_test_dna.dat")
File f_labels_train = read_csv("@SHOGUN_DATA@/label_train_dna.dat")

#![create_features]
Features feats_train = create_string_features(f_feats_train, enum EAlphabet.DNA)
Features feats_test = create_string_features(f_feats_test, enum EAlphabet.DNA) 
Labels labels_train = create_labels(f_labels_train)
#![create_features]

#![create_kernel]
Kernel svm_kernel = create_kernel("WeightedDegreeStringKernel", degree=3)
svm_kernel.init(feats_train, feats_train)
#![create_kernel]

#![create_svm_and_train]
Machine svm = create_machine("SVMLight", kernel=svm_kernel, C1=1.0, C2=1.0)
svm.train(feats_train, labels_train)
#![create_svm_and_train]

#![create_kernel]
Kernel svm_kernel2 = create_kernel("WeightedDegreeStringKernel", degree=3)
svm_kernel2.init(feats_train, feats_train)
#![create_kernel]

#![obtain_dasvm_from_the_previous_svm]
Machine dasvm = create_machine("DomainAdaptationSVM", C1=1.0, C2=1.0, kernel=svm_kernel2, presvm=as_svm(svm), B=1.0)
#![obtain_dasvm_from_the_previous_svm]

#![train_and_apply]
dasvm.train(feats_train, labels_train)
Labels labels_predict = dasvm.apply(feats_test)
RealVector labels_vector = labels_predict.get_real_vector("labels")
RealVector weights = svm.get_real_vector("m_alpha")
real bias = svm.get_real("m_bias")
#![train_and_apply]
