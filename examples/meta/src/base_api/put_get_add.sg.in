Machine knn = create_machine("KNN")
knn.put("k", 2)

Kernel k = create_kernel("GaussianKernel")
k.put("log_width", 2.1)
k.put("log_width", 2.0)
real log_width = k.get_real("log_width")

RealVector vector(2)
vector[0] = 0.0
vector[1] = 0.1

RegressionLabels labels()
labels.put("labels", vector)
RealVector vector2 = labels.get_real_vector("labels")
labels.put("labels", vector2)

RealMatrix matrix(2,2)
matrix[0,0] = 0.0
matrix[0,1] = 0.1
matrix[1,0] = 0.2
matrix[1,1] = 0.4

# TODO: replace this with another class that has matrix parameters as features are immutable
#Features feats = create_features("DenseFeatures", enum EPrimitiveType.PT_FLOAT64, feature_matrix=matrix)
#RealMatrix matrix2 = feats.get_real_matrix("feature_matrix")
#feats.put("feature_matrix", matrix2)

Distance dist = create_distance("EuclideanDistance")
knn.put("distance", dist)

Machine svm = create_machine("LibSVM")
svm.put("kernel", k)
Kernel k2 = as_kernel(svm.get("kernel"))
svm.put("kernel", k2)

#![the following "libsvm_solver_type" put are equivalent]
svm.put("libsvm_solver_type", 2)
svm.put("libsvm_solver_type", "LIBSVM_C_SVC")
#![option is always returned as a string]
string option = svm.get_option("libsvm_solver_type")

File f_feats = read_csv("@SHOGUN_DATA@/regression_1d_sinc_features_train.dat")
Features feats = create_features(f_feats)
Kernel k3 = create_kernel("PolyKernel", degree=2)
Kernel k4 = create_kernel("GaussianKernel", log_width=2.0)
Kernel combined_kernel = create_kernel("CombinedKernel")
combined_kernel.add("kernel_array", k3)
combined_kernel.add("kernel_array", k4)
combined_kernel.init(feats, feats)
RealMatrix K = combined_kernel.get_kernel_matrix()

Kernel k3_ = as_kernel(combined_kernel.get("kernel_array", 0))
Kernel k4_ = as_kernel(combined_kernel.get("kernel_array", 1))
combined_kernel.add("kernel_array", k3)

