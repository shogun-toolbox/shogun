KNN knn()
knn.put("k", 2)

Kernel k = kernel("GaussianKernel")
k.put("log_width", 2.1)
k.put("log_width", 2.0)
real log_width = k.get_real("log_width")

RealVector vector(2)
vector[0] = 0.0
vector[1] = 0.1

RegressionLabels labels()
labels.put("labels", vector)
RealVector vector2 = labels.get_real_vector("labels")
labels.put("labels", vector2)

RealMatrix matrix(2,2)
matrix[0,0] = 0.0
matrix[0,1] = 0.1
matrix[1,0] = 0.2
matrix[1,1] = 0.4

# TODO: replace this with another class that has matrix parameters as features are immutable
#Features feats = features("DenseFeatures", enum EPrimitiveType.PT_FLOAT64, feature_matrix=matrix)
#RealMatrix matrix2 = feats.get_real_matrix("feature_matrix")
#feats.put("feature_matrix", matrix2)

EuclideanDistance distance()
knn.put("distance", distance)

SGObject distance2 = knn.get("distance")
knn.put("distance", distance2)

LibSVM svm()
svm.put("kernel", k)
SGObject k2 = svm.get("kernel")
svm.put("kernel", k2)

