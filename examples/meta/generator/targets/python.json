{
    "Program": "import numpy as np\n$dependencies\n\n$program",
    "Dependencies": {
        "IncludeAllClasses": false,
        "IncludeInterfacedClasses": true,
        "IncludeEnums": true,
        "IncludeGlobalFunctions": true,
        "DependencyListElement": "import shogun as sg",
        "DependencyListSeparator": "\n"
    },
    "Statement": "$statement\n",
    "Comment": "#$comment\n",
    "Init": {
        "Construct": "$name = sg.$typeName($arguments$kwargs)",
        "Copy": "$name = $expr",
        "KeywordArguments": {
            "List": "$elements",
            "Element": "$keyword=$expr",
            "Separator": ", ",
            "InitialSeperatorWhenArgs>0": true
        },
        "string": "$name = $arguments",
        "BoolVector": "$name = np.zeros( ($arguments), dtype='bool')",
        "CharVector": "$name = np.zeros( ($arguments), dtype='|S1')",
        "ByteVector": "$name = np.zeros( ($arguments), dtype='uint8')",
        "WordVector": "$name = np.zeros( ($arguments), dtype='uint16')",
        "IntVector": "$name = np.zeros( ($arguments), dtype='int32')",
        "LongIntVector": "$name = np.zeros( ($arguments), dtype='int64')",
        "ULongIntVector": "$name = np.zeros( ($arguments), dtype='uint64')",
        "ShortRealVector": "$name = np.zeros( ($arguments), dtype='float32')",
        "RealVector": "$name = np.zeros( ($arguments), dtype='float64')",
        "ComplexVector": "$name = np.zeros( ($arguments), dtype='complex128)'",
        "BoolMatrix": "$name = np.zeros( ($arguments), dtype='bool')",
        "CharMatrix": "$name = np.zeros( ($arguments), dtype='|S1')",
        "ByteMatrix": "$name = np.zeros( ($arguments), dtype='uint8')",
        "WordMatrix": "$name = np.zeros( ($arguments), dtype='uint16')",
        "IntMatrix": "$name = np.zeros( ($arguments), dtype='int32')",
        "LongIntMatrix": "$name = np.zeros( ($arguments), dtype='int64')",
        "ULongIntMatrix": "$name = np.zeros( ($arguments), dtype='uint64')",
        "ShortRealMatrix": "$name = np.zeros( ($arguments), dtype='float32')",
        "RealMatrix": "$name = np.zeros( ($arguments), dtype='float64')",
        "ComplexMatrix": "$name = np.zeros( ($arguments), dtype='complex128')"
    },
    "ListInit": {
        "BoolVector": "$name = np.array([$arguments], dtype='bool')",
        "CharVector": "$name = np.array([$arguments], dtype='|S1')",
        "ByteVector": "$name = np.array([$arguments], dtype='uint8')",
        "WordVector": "$name = np.array([$arguments], dtype='uint16')",
        "IntVector": "$name = np.array([$arguments], dtype='int32')",
        "LongIntVector": "$name = np.array([$arguments], dtype='int64')",
        "ULongIntVector": "$name = np.array([$arguments], dtype='uint64')",
        "ShortRealVector": "$name = np.array([$arguments], dtype='float32')",
        "RealVector": "$name = np.array([$arguments], dtype='float64')",
        "ComplexVector": "$name = np.array([$arguments], dtype='complex128')"
    },
    "Assign": "$identifier = $expr",
    "Type": {
        "Default": "$typeName"
    },
    "Expr": {
        "StringLiteral": "\"$literal\"",
        "CharLiteral": "'$literal'",
        "BoolLiteral": {
            "True": "True",
            "False": "False"
        },
        "IntLiteral": "$number",
        "RealLiteral": "$number",
        "FloatLiteral": "$number",
        "MethodCall": {
            "Default": "$object.$method($arguments)",
            "get_int": "$object.get($arguments)",
            "get_long": "$object.get($arguments)",
            "get_int_vector": "$object.get($arguments)",
            "get_real": "$object.get($arguments)",
            "get_real_vector": "$object.get($arguments)",
            "get_real_matrix": "$object.get($arguments)",
            "get_char_string_list": "$object.get($arguments)",
            "get_word_string_list": "$object.get($arguments)",
            "get_option": "$object.get($arguments)",
            "get_string": "$object.get($arguments)"
        },
        "StaticCall": "sg.$typeName.$method($arguments)",
        "GlobalCall": {
            "Default": "sg.$method($arguments$kwargs)",
            "create_svm": "sg.create($arguments$kwargs)",
            "create_evaluation": "sg.create($arguments$kwargs)",
            "create_multiclass_strategy": "sg.create($arguments$kwargs)",
            "create_ecoc_encoder": "sg.create($arguments$kwargs)",
            "create_ecoc_decoder": "sg.create($arguments$kwargs)",
            "create_transformer": "sg.create($arguments$kwargs)",
            "create_layer": "sg.create($arguments$kwargs)",
            "create_splitting_strategy": "sg.create($arguments$kwargs)",
            "create_machine_evaluation": "sg.create($arguments$kwargs)",
            "create_gp_likelihood": "sg.create($arguments$kwargs)",
            "create_gp_mean": "sg.create($arguments$kwargs)",
            "create_gp_inference": "sg.create($arguments$kwargs)",
            "create_differentiable": "sg.create($arguments$kwargs)",
            "create_loss": "sg.create($arguments$kwargs)",
            "create_parameter_observer": "sg.create($arguments$kwargs)",
            "create_evaluation_result": "sg.create($arguments$kwargs)",
            "create_distribution": "sg.create($arguments$kwargs)",
            "create_combination_rule": "sg.create($arguments$kwargs)",
            "create_distance": "sg.create($arguments$kwargs)",
            "create_machine": "sg.create($arguments$kwargs)",
            "create_structured_model": "sg.create($arguments$kwargs)",
            "create_factor_type": "sg.create($arguments$kwargs)",
            "create_gaussian_process": "sg.create($arguments$kwargs)",
            "create_minimizer": "sg.create($arguments$kwargs)",
            "create_lbfgs_minimizer": "sg.create($arguments$kwargs)",
            "create_kernel_normalizer": "sg.create($arguments$kwargs)"
        },
        "Identifier": "$identifier",
        "Enum":"sg.$value"
    },
    "Element": {
        "Access": {
            "Vector": "$identifier[$indices]",
            "Matrix": "$identifier[$indices]"
        },
        "Assign": {
            "Vector": "$identifier[$indices] = $expr",
            "Matrix": "$identifier[$indices] = $expr"
        },
        "ZeroIndexed": true
    },
    "Print": "print $expr",
    "OutputDirectoryName": "python",
    "FileExtension": ".py"
}
