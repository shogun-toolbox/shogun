{
    "Program": "#include <memory>\n#include <shogun/io/stream/OutputStream.h>\n${dependencies}\n\nusing namespace shogun;\nusing namespace shogun::io;\n\nint main(int, char*[])\n{\n\n$program\nreturn 0;\n}\n",
    "Dependencies": {
        "IncludeAllClasses": true,
        "IncludeEnums": true,
        "IncludeGlobalFunctions": true,
        "DependencyListElement": "#include <$includePath>",
        "DependencyListSeparator": "\n"
    },
    "Statement": "$statement;\n",
    "Comment": "//$comment\n",
    "Init": {
        "Construct": "auto $name = std::make_shared<$typeName>($arguments)$kwargs",
        "Copy": "auto $name = $expr$kwargs",
        "KeywordArguments": {
            "List": ";\n$elements",
            "Element": "$name->put(\"$keyword\", $expr)",
            "Separator": ";\n",
            "InitialSeperatorWhenArgs>0": false
        },
        "BoolVector": "auto $name = SGVector<bool>($arguments)",
        "CharVector": "auto $name = SGVector<char>($arguments)",
        "ByteVector": "auto $name = SGVector<uint8_t>($arguments)",
        "WordVector": "auto $name = SGVector<uint16_t>($arguments)",
        "IntVector": "auto $name = SGVector<int32_t>($arguments)",
        "LongIntVector": "auto $name = SGVector<int64_t>($arguments)",
        "ULongIntVector": "auto $name = SGVector<uint64_t>($arguments)",
        "ShortRealVector": "auto $name = SGVector<float32_t>($arguments)",
        "RealVector": "auto $name = SGVector<float64_t>($arguments)",
        "LongRealVector": "auto $name = SGVector<floatmax_t>($arguments)",
        "ComplexVector": "auto $name = SGVector<complex128_t>($arguments)",
        "BoolMatrix": "auto $name = SGMatrix<bool>($arguments)",
        "CharMatrix": "auto $name = SGMatrix<char>($arguments)",
        "ByteMatrix": "auto $name = SGMatrix<uint8_t>($arguments)",
        "WordMatrix": "auto $name = SGMatrix<uint16_t>($arguments)",
        "IntMatrix": "auto $name = SGMatrix<int32_t>($arguments)",
        "LongIntMatrix": "auto $name = SGMatrix<int64_t>($arguments)",
        "ULongIntMatrix": "auto $name = SGMatrix<uint64_t>($arguments)",
        "ShortRealMatrix": "auto $name = SGMatrix<float32_t>($arguments)",
        "RealMatrix": "auto $name = SGMatrix<float64_t>($arguments)",
        "LongRealMatrix": "auto $name = SGMatrix<floatmax_t>($arguments)",
        "ComplexMatrix": "auto $name = SGMatrix<complex128_t>($arguments)"
    },
    "ListInit": {
        "BoolVector": "auto $name = SGVector<bool>({$arguments})",
        "CharVector": "auto $name = SGVector<char>({$arguments})",
        "ByteVector": "auto $name = SGVector<uint8_t>({$arguments})",
        "WordVector": "auto $name = SGVector<uint16_t>({$arguments})",
        "IntVector": "auto $name = SGVector<int32_t>({$arguments})",
        "LongIntVector": "auto $name = SGVector<int64_t>({$arguments})",
        "ULongIntVector": "auto $name = SGVector<uint64_t>({$arguments})",
        "ShortRealVector": "auto $name = SGVector<float32_t>({$arguments})",
        "RealVector": "auto $name = SGVector<float64_t>({$arguments})",
        "LongRealVector": "auto $name = SGVector<floatmax_t>({$arguments})",
        "ComplexVector": "auto $name = SGVector<complex128_t>({$arguments})"
    },
    "Assign": "$identifier = $expr",
    "Type": {
        "RealFeatures": "DenseFeatures<float64_t>",
        "RealSubsetFeatures": "DenseSubsetFeatures<float64_t>",
        "StringCharFeatures": "StringFeatures<char>",
        "StringCharList": "std::vector<SGVector<char>>",
        "StringWordList": "std::vector<SGVector<uint16_t>>",
        "Default": "$typeName",
        "bool": "bool",
        "string": "char*",
        "char": "char",
        "int": "int32_t",
        "float": "float32_t",
        "real": "float64_t",
        "BoolVector": "SGVector<bool>",
        "CharVector": "SGVector<char>",
        "ByteVector": "SGVector<uint8_t>",
        "WordVector": "SGVector<uint16_t>",
        "ShortVector": "SGVector<int16_t>",
        "IntVector": "SGVector<int32_t>",
        "LongIntVector": "SGVector<int64_t>",
        "ULongIntVector": "SGVector<uint64_t>",
        "ShortRealVector": "SGVector<float32_t>",
        "RealVector": "SGVector<float64_t>",
        "LongRealVector": "SGVector<floatmax_t>",
        "ComplexVector": "SGVector<complex128_t>",
        "BoolMatrix": "SGMatrix<bool>",
        "CharMatrix": "SGMatrix<char>",
        "ByteMatrix": "SGMatrix<uint8_t>",
        "WordMatrix": "SGMatrix<uint16_t>",
        "ShortMatrix": "SGMatrix<int16_t>",
        "IntMatrix": "SGMatrix<int32_t>",
        "LongIntMatrix": "SGMatrix<int64_t>",
        "ULongIntMatrix": "SGMatrix<uint64_t>",
        "ShortRealMatrix": "SGMatrix<float32_t>",
        "RealMatrix": "SGMatrix<float64_t>",
        "LongRealMatrix": "SGMatrix<floatmax_t>",
        "ComplexMatrix": "SGMatrix<complex128_t>",
        "RealDistance": "RealDistance<float64_t>",
        "RealDenseDistance": "DenseDistance<float64_t>"
    },
    "Expr": {
        "StringLiteral": "\"$literal\"",
        "CharLiteral": "'$literal'",
        "BoolLiteral": {
            "True": "true",
            "False": "false"
        },
        "IntLiteral": "$number",
        "RealLiteral": "$number",
        "FloatLiteral": "${number}f",
        "MethodCall": {
            "Default": "$object->$method($arguments)",
            "get_int": "$object->get<int32_t>($arguments)",
            "get_long": "$object->get<int64_t>($arguments)",
            "get_int_vector": "$object->get<SGVector<int32_t>>($arguments)",
            "get_real": "$object->get<float64_t>($arguments)",
            "get_real_vector": "$object->get<SGVector<float64_t>>($arguments)",
            "get_real_matrix": "$object->get<SGMatrix<float64_t>>($arguments)",
            "get_int_string_list": "$object->get<std::vector<SGVector<int32_t>>>($arguments)",
            "get_char_string_list": "$object->get<std::vector<SGVector<char>>>($arguments)",
            "get_word_string_list": "$object->get<std::vector<SGVector<uint16_t>>>($arguments)",
            "get_option": "$object->get<std::string>($arguments)",
            "get_string": "$object->get<std::string>($arguments)"
        },
        "StaticCall": "$typeName::$method($arguments)",
        "GlobalCall": {
            "Default": "$method($arguments)",
            "create_features": "create<Features>($arguments)",
            "create_distance": "create<Distance>($arguments)",
            "create_machine": "create<Machine>($arguments)",
            "create_labels": "create<Labels>($arguments)",
            "read_csv": "create<CSVFile>($arguments)",
            "read_libsvm": "create<LibSVMFile>($arguments)",
            "create_pipeline": "create<PipelineBuilder>($arguments)",
            "create_kernel": "create<Kernel>($arguments)",
            "create_evaluation": "create<Evaluation>($arguments)",
            "create_multiclass_strategy": "create<MulticlassStrategy>($arguments)",
            "create_ecoc_encoder": "create<ECOCEncoder>($arguments)",
            "create_ecoc_decoder": "create<ECOCDecoder>($arguments)",
            "create_transformer": "create<Transformer>($arguments)",
            "create_layer": "create<NeuralLayer>($arguments)",
            "create_splitting_strategy": "create<SplittingStrategy>($arguments)",
            "create_machine_evaluation": "create<MachineEvaluation>($arguments)",
            "create_svm": "create<SVM>($arguments)",
            "create_gp_likelihood": "create<LikelihoodModel>($arguments)",
            "create_gp_mean": "create<MeanFunction>($arguments)",
            "create_gp_inference": "create<Inference>($arguments)",
            "create_differentiable": "create<DifferentiableFunction>($arguments)",
            "create_loss": "create<LossFunction>($arguments)",
            "create_parameter_observer": "create<ParameterObserver>($arguments)",
            "create_evaluation_result": "create<EvaluationResult>($arguments)",
            "create_distribution": "create<Distribution>($arguments)",
            "create_combination_rule": "create<CombinationRule>($arguments)",
            "create_string_features": "details::string_features($arguments)",
            "create_subset_features": "create<DenseSubsetFeatures<float64_t>>($arguments)",
            "create_gaussian_process": "create<GaussianProcess>($arguments)"
        },
        "Identifier": "$identifier",
        "Enum":"$typeName::$value"
    },
    "Element": {
        "Access": {
            "Vector": "$identifier[$indices]",
            "Matrix": "$identifier($indices)"
        },
        "Assign": {
            "Vector": "$identifier[$indices] = $expr",
            "Matrix": "$identifier($indices) = $expr"
        },
        "ZeroIndexed": true
    },
    "Print": "SG_SPRINT($expr)",
    "OutputDirectoryName": "cpp",
    "FileExtension": ".cpp"
}
