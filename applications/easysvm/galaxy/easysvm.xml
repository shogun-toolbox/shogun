<?xml version="1.0"?>
<tool id="easysvm" name="Train and Test SVMs">
<description>Train SVMs and predict for given hyper-parameters</description>
  <command interpreter="python">easysvm.py
	#if $protocol.expt_type=="1"
		cv $protocol.crossval
	#elif $protocol.expt_type=="2"
		modelsel $protocol.crossval
	#elif $protocol.expt_type=="3"
		pred
	#end if
        $C
	#if $kernel.kname == "1"
	    linear
        #elif $kernel.kname == "2"
	    poly ${kernel.degree} ${kernel.inhomogene} true
        #elif $kernel.kname == "3"
	    gauss ${kernel.width}
        #elif $kernel.kname == "4"
	    spec ${kernel.degree}
        #elif $kernel.kname == "5"
	    wd ${kernel.degree} ${kernel.shift}
        #end if
	#if $protocol.expt_type=="1"
	    #if $protocol.datatype.inputdatatype=="1"
	        fasta $protocol.datatype.dataset_pos $protocol.datatype.dataset_neg
	    #else
	        arff $protocol.datatype.dataset
            #end if
	#elif $protocol.expt_type=="2"
	    #if $protocol.datatype.inputdatatype=="1"
	        fasta $protocol.datatype.dataset_pos $protocol.datatype.dataset_neg
	    #else
	        arff $protocol.datatype.dataset
            #end if
	#else
	    #if $protocol.datatype.inputdatatype=="1"
	        fasta $protocol.datatype.dataset_pos $protocol.datatype.dataset_neg
	    #else
	        arff $protocol.datatype.dataset
            #end if
	    $protocol.datatype.dataset_test
	#end if
	$outfile
        #if $kernel.kname=="4" or $kernel.kname=="5"
            #if $kernel.seq.stype=="dna"
                dna $kernel.seq.con
            #elif $kernel.seq.stype=="protein"
                protein $kernel.seq.con
            #end if
        #end if
  </command>
  <inputs>
	  <conditional name="protocol">
	  <param name="expt_type" type="select" label="Experimental
	  Protocol" help="In 'Cross Validation' mode, the training set is
			split into N subsets. (N-1) subsets are used for training
            and the remaining subset is used for testing. This is repeated
            until every subset has been used for testing once.
            In 'Prediction' mode, one trains on a
	        training set and then predicts on a separate testing set.">
        <option value="1">Train using cross validation</option>
	<option value="3">Train and predict</option>
      </param>
      <when value="1">
	  <conditional name="datatype">
	  <param name="inputdatatype" type="select" label="Input data type" help="There are two available formats: FASTA for sequences and the more general ARFF format for sequences or numerical attributes.">
	  <option value="1">FASTA</option>
	  <option value="2">ARFF</option>
	  </param>
	  <when value="1">
		  <param name="dataset_pos" type="data" format="fasta">
		  <label >A data file with positive sequence for training</label>
		  </param>
		  <param name="dataset_neg" type="data" format="fasta">
		  <label >A data file with negative sequence for training</label>
		  </param>
	  </when>
	  <when value="2">
		  <param name="dataset" type="data" format="arff">
		  <label >A data file with labeled examples for training</label>
		  </param>
	  </when>
	  </conditional>
	  <param name="crossval" type="integer" size="4" value="3"
	  help="Use the cross-validation parameter to determine the
	  number of cross validation repeats. Typical values are between
	  3 and 10.">
	  <label>Number of cross validation repeats</label>
	  </param>
      </when>
      <when value="3">
	  <conditional name="datatype">
	  <param name="inputdatatype" type="select" label="Input data type" help="">
	  <option value="1">FASTA</option>
	  <option value="2">ARFF</option>
	  </param>
	  <when value="1">
		  <param name="dataset_pos" type="data" format="fasta">
		  <label >A data file with positive sequence for training</label>
		  </param>
		  <param name="dataset_neg" type="data" format="fasta">
		  <label >A data file with negaitive sequence for training</label>
		  </param>
		  <param name="dataset_test" type="data" format="fasta">
		  <label>A data file with sequences for prediction</label>
		  </param>
	  </when>
	  <when value="2">
	         <param name="dataset" type="data" format="arff">
		 <label >A data file with labeled examples for training</label>
		 </param>
		 <param name="dataset_test" type="data" format="arff">
		 <label>A data file with examples for prediction</label>
		 </param>
	  </when>
	  </conditional>
      </when>
    </conditional>
    <param name="C" type="float" size="10" value="10" help="Increase C if you trust your training set. ">
      <label>SVM regularization parameter C
	  </label>
    </param>
    <conditional name="kernel">
      <param name="kname" type="select" label="Kernel" help="The kernel
	  determines how the 'similarity' between two examples is
	  computed. It has to fit to the type and properties of the data: Use the Linear,
	  Polynomial or Gaussian kernel for real-valued data and the
	  Spectrum and Weighted Degree kernel for sequences.">
	<option value="1">Linear</option>
	<option value="2">Polynomial</option>
	<option value="3">Gaussian (RBF)</option>
	<option value="4" selected="true">Spectrum</option>
	<option value="5">Weighted Degree</option>
      </param>
      <when value="1">
      </when>
      <when value="2">
        <param name="degree" type="integer" size="4" value="3" help="The
	  degree of the polynomial kernel determines the largest number of
	  input features which are combined. ">
	  <label>The degree of the Polynomial Kernel</label>
	</param>
        <param name="inhomogene" type="boolean" truevalue="true" falsevalue="false" checked="true" help="Inhomogenous polynomial kernels can model more complex features." />
	<!--<param name="normalised" type="select" help="It is recommended to set this to yes">
	  <option value="true">Yes</option>
	  <option value="false">No</option>
	</param>-->
      </when>
      <when value="3">
        <param name="width" type="float" size="10" value="1" help="The
	  kernel width controls the breadth of the Gaussian
	  around each point. ">
	  <label>The width of the Gaussian Kernel</label>
	</param>
      </when>
      <when value="4">
        <param name="degree" type="integer" size="10" value="6"
	  help="Degree controls the maximal length of substrings considered in the Spectrum kernel. ">
	  <label>The degree of the Spectrum Kernel</label>
        </param>

        <conditional name="seq">
               <param name="stype" type="select" label="Input sequence type" help="Mention about the input data file sequence type DNA/Protein.">
                     <option value="dna">DNA</option>
                     <option value="protein">Protein</option>
               </param>
               <when value="dna">
		     <param name="con" type="select" label="Non Nucleotide converter" help="If any Non Nucleotide character present in input sequence, replace with anyone of the following">
                           <option value="A">Adenine[A]</option>
                           <option value="T">Thymine[T]</option>
                           <option value="C">Cytosine[C]</option>
                           <option value="G">Guanine[G]</option>
                           <option value="R">Purine[A|G]</option>
                           <option value="Y">Pyrimidine[T|C]</option>
                           <option value="N">Nucleotide[A|T|C|G]</option>
                     </param>
               </when>
               <when value="protein">
                    <param name="con" type="select" label="Non Amino acid converter" help="If any Non Amino acid character present in input sequence, replace with anyone of the following">
                           <option value="G">Glycine</option>
                           <option value="P">Proline</option>
                           <option value="A">Alanine</option>
                           <option value="V">Valine</option>
                           <option value="L">Leucine</option>
                           <option value="I">Isoleucine</option>
                           <option value="M">Methionine</option>
                           <option value="C">Cysteine</option>
                           <option value="F">Phenylalanine</option>
                           <option value="Y">Tyrosine</option>
                           <option value="W">Tryptophan</option>
                           <option value="H">Histidine</option>
                           <option value="K">Lysine</option>
                           <option value="R">Arginine</option>
                           <option value="Q">Glutamine</option>
                           <option value="N">Asparagine</option>
                           <option value="E">Glutamic Acid</option>
                           <option value="D">Aspartic Acid</option>
                           <option value="S">Serine</option>
                           <option value="T">Threonine</option>
                           <option value="random">Random</option>
                    </param>
               </when>
        </conditional>

      </when>
      <when value="5">
        <param name="degree" type="integer" size="10" value="10"
	  help="Degree controls the maximal length of substrings considered in the WD kernel. ">
	  <label>The degree of the WD Kernel</label>
        </param>
        <param name="shift" type="integer" size="10" value="2"
	  help="The shift parameter controls how many nucleotides a sequence elements can vary in position. ">
          <label>The shift parameter of the WD Kernel to allow positional variations</label>
        </param>

        <conditional name="seq">
               <param name="stype" type="select" label="Input sequence type" help="Mention about the input data file sequence type DNA/Protein.">
                     <option value="dna">DNA</option>
                     <option value="protein">Protein</option>
               </param>
               <when value="dna">
		     <param name="con" type="select" label="Non Nucleotide converter" help="If any Non Nucleotide character present in input sequence, replace with anyone of the following">
                           <option value="A">Adenine[A]</option>
                           <option value="T">Thymine[T]</option>
                           <option value="C">Cytosine[C]</option>
                           <option value="G">Guanine[G]</option>
                           <option value="R">Purine[A|G]</option>
                           <option value="Y">Pyrimidine[T|C]</option>
                           <option value="N">Nucleotide[A|T|C|G]</option>
                     </param>
               </when>
               <when value="protein">
                    <param name="con" type="select" label="Non Amino acid converter" help="If any Non Amino acid character present in input sequence, replace with anyone of the following">
                           <option value="G">Glycine</option>
                           <option value="P">Proline</option>
                           <option value="A">Alanine</option>
                           <option value="V">Valine</option>
                           <option value="L">Leucine</option>
                           <option value="I">Isoleucine</option>
                           <option value="M">Methionine</option>
                           <option value="C">Cysteine</option>
                           <option value="F">Phenylalanine</option>
                           <option value="Y">Tyrosine</option>
                           <option value="W">Tryptophan</option>
                           <option value="H">Histidine</option>
                           <option value="K">Lysine</option>
                           <option value="R">Arginine</option>
                           <option value="Q">Glutamine</option>
                           <option value="N">Asparagine</option>
                           <option value="E">Glutamic Acid</option>
                           <option value="D">Aspartic Acid</option>
                           <option value="S">Serine</option>
                           <option value="T">Threonine</option>
                           <option value="random">Random</option>
                    </param>
               </when>
        </conditional>

      </when>
    </conditional>
  </inputs>
  <outputs>
    <data format="tabular" name="outfile" />
  </outputs>
  <help>
.. class:: infomark

    The SVM will classify examples according to their features and
    report the classes to which they belong to for every entry in the
    training set or the test set. The cross validation (CV) procedure
    splits the data in a number of (approximately) equal sized sets
    (controlled by the CV repeat parameter). Then, it holds out each
    of those sets in turn for validation (prediction with the SVM),
    while using all the other sets for training.

.. class:: warningmark

    Please note that the
    total computation time is proportional to the number of
    cross-validation rounds.

.. class:: infomark

    **TIP:** The result table with the individual classification for every
    example.  To find optimal settings for C and the kernel
    parameters, check the prediction performance with *SVM Toolbox->Evaluate Predictions*
    and adjust in either direction to find a good setting. Repeat
    several times if necessary. Alternatively, use *SVM Toolbox->Model Selection*.

-----

    This tool is part of the MLB Galaxy package, adding some machine
    learning functionality to PSU's Galaxy framework.  Copyright (C)
    2008 Sebastian J. Schultheiss (sebi@umich.edu), Gunnar Raetsch
    (raetsch@tuebingen.mpg.de) and Cheng Soon Ong (chengsoon.ong@tuebingen.mpg.de)

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, see http://www.gnu.org/licenses
    or write to the Free Software Foundation, Inc., 51 Franklin Street,
    Fifth Floor, Boston, MA 02110-1301  USA
  </help>
</tool>



