MergeCFLAGS()
find_package(Threads)
include(ExternalProject)

set(GTEST_PREFIX
	"${CMAKE_BINARY_DIR}/GoogleMock")
set(BUILD_DIR
	"${GTEST_PREFIX}/src/GoogleMock-build")
set(GTEST_DIR
	"${BUILD_DIR}/googlemock/gtest")
set(GMOCK_DIR
	"${BUILD_DIR}/googlemock")

IF (MSVC)
	SET (CUSTOM_CMAKE_ARGS
		-DINSTALL_GTEST=OFF
		-DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}${CMAKE_DEFINITIONS}
		-DCMAKE_CXX_FLAGS_RELEASE:STRING=${CMAKE_CXX_FLAGS_RELEASE}
		-DCMAKE_CXX_FLAGS_DISTRIBUTION:STRING=${CMAKE_CXX_FLAGS_DISTRIBUTION}
		-DCMAKE_CXX_FLAGS_DEBUG:STRING=${CMAKE_CXX_FLAGS_DEBUG}
		-DCMAKE_C_COMPILER:STRING=${CMAKE_C_COMPILER}
		-DCMAKE_CXX_COMPILER:STRING=${CMAKE_CXX_COMPILER}
	)
ELSE ()
	SET(MERGED_CXX_FLAGS "${MERGED_CXX_FLAGS} -fPIC")
	SET (CUSTOM_CMAKE_ARGS
		-DINSTALL_GTEST=OFF
		-DCMAKE_CXX_FLAGS:STRING=${MERGED_CXX_FLAGS}${CMAKE_DEFINITIONS}
		-DCMAKE_C_COMPILER:STRING=${CMAKE_C_COMPILER}
		-DCMAKE_CXX_COMPILER:STRING=${CMAKE_CXX_COMPILER}
	)
ENDIF()

IF (EXISTS /usr/src/googletest)
	ExternalProject_Add(
		GoogleMock
		DOWNLOAD_COMMAND ""
		SOURCE_DIR /usr/src/googletest
		PREFIX ${CMAKE_BINARY_DIR}/GoogleMock
		INSTALL_COMMAND ""
		CMAKE_ARGS ${CUSTOM_CMAKE_ARGS}
		BUILD_BYPRODUCTS ${GMOCK_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gmock${CMAKE_STATIC_LIBRARY_SUFFIX} ${GTEST_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gtest${CMAKE_STATIC_LIBRARY_SUFFIX}
	)

	set(GTEST_INCLUDE_DIR "/usr/src/googletest/googletest/include")
	set(GMOCK_INCLUDE_DIR "/usr/src/googletest/googlemock/include")
ELSE()
	ExternalProject_Add(
		GoogleMock
		URL https://github.com/google/googletest/archive/release-1.8.1.tar.gz
		URL_MD5 2e6fbeb6a91310a16efe181886c59596
		TIMEOUT 10
		PREFIX ${CMAKE_BINARY_DIR}/GoogleMock
		DOWNLOAD_DIR ${THIRD_PARTY_DIR}/GoogleMock
		INSTALL_COMMAND ""
		CMAKE_ARGS ${CUSTOM_CMAKE_ARGS}
		BUILD_BYPRODUCTS ${GMOCK_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gmock${CMAKE_STATIC_LIBRARY_SUFFIX} ${GTEST_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gtest${CMAKE_STATIC_LIBRARY_SUFFIX}
	)

	set(GTEST_INCLUDE_DIR
		"${GTEST_PREFIX}/src/GoogleMock/googletest/include")
	set(GMOCK_INCLUDE_DIR
		"${GTEST_PREFIX}/src/GoogleMock/googlemock/include")

	file(MAKE_DIRECTORY ${GTEST_INCLUDE_DIR})
	file(MAKE_DIRECTORY ${GMOCK_INCLUDE_DIR})
ENDIF()

add_library(gtest IMPORTED STATIC GLOBAL)
set_target_properties(gtest PROPERTIES
	INTERFACE_INCLUDE_DIRECTORIES "${GTEST_INCLUDE_DIR}"
	IMPORTED_LINK_INTERFACE_LIBRARIES "${CMAKE_THREAD_LIBS_INIT}")
if(CMAKE_GENERATOR MATCHES "Visual Studio.*" OR CMAKE_GENERATOR STREQUAL Xcode)
	set_target_properties(gtest PROPERTIES
		IMPORTED_LOCATION_DEBUG "${GTEST_DIR}/Debug/${CMAKE_STATIC_LIBRARY_PREFIX}gtest${CMAKE_STATIC_LIBRARY_SUFFIX}"
		IMPORTED_LOCATION_RELEASE "${GTEST_DIR}/Release/${CMAKE_STATIC_LIBRARY_PREFIX}gtest${CMAKE_STATIC_LIBRARY_SUFFIX}")
else()
	set_target_properties(gtest PROPERTIES
		IMPORTED_LOCATION "${GTEST_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gtest${CMAKE_STATIC_LIBRARY_SUFFIX}")
endif()

add_library(gmock IMPORTED STATIC GLOBAL)
set_target_properties(gmock PROPERTIES
	INTERFACE_INCLUDE_DIRECTORIES "${GMOCK_INCLUDE_DIR}"
	IMPORTED_LINK_INTERFACE_LIBRARIES "${CMAKE_THREAD_LIBS_INIT}")
if(CMAKE_GENERATOR MATCHES "Visual Studio.*" OR CMAKE_GENERATOR STREQUAL Xcode)
	set_target_properties(gmock PROPERTIES
		IMPORTED_LOCATION_DEBUG "${GMOCK_DIR}/Debug/${CMAKE_STATIC_LIBRARY_PREFIX}gmock${CMAKE_STATIC_LIBRARY_SUFFIX}"
		IMPORTED_LOCATION_RELEASE "${GMOCK_DIR}/Release/${CMAKE_STATIC_LIBRARY_PREFIX}gmock${CMAKE_STATIC_LIBRARY_SUFFIX}")
else()
	set_target_properties(gmock PROPERTIES
		IMPORTED_LOCATION "${GMOCK_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gmock${CMAKE_STATIC_LIBRARY_SUFFIX}")
endif()

add_dependencies(gtest GoogleMock)
add_dependencies(gmock GoogleMock)
