/** \page staticcmdline 命令行静态接口函数参考


\section Features_sec Features
\arg \b load_features \verbatim sg('load_features', filename, feature_class, type, target[, size[, comp_features]]) \endverbatim
\arg \b save_features \verbatim sg('save_features', filename, type, target) \endverbatim
\arg \b clean_features \verbatim sg('clean_features', 'TRAIN|TEST') \endverbatim
\arg \b get_features \verbatim [features]=sg('get_features', 'TRAIN|TEST') \endverbatim
\arg \b add_features \verbatim sg('add_features', 'TRAIN|TEST', features[, DNABINFILE|<ALPHABET>]) \endverbatim
\arg \b add_multiple_features \verbatim sg('add_multiple_features', 'TRAIN|TEST', repetitions, features[, DNABINFILE|<ALPHABET>]) \endverbatim
\arg \b add_dotfeatures \verbatim sg('add_dotfeatures', 'TRAIN|TEST', features[, DNABINFILE|<ALPHABET>]) \endverbatim
\arg \b set_features \verbatim sg('set_features', 'TRAIN|TEST', features[, DNABINFILE|<ALPHABET>][, [from_position_list|slide_window], window size, [position_list|shift], skip) \endverbatim
\arg \b set_ref_features \verbatim sg('set_ref_features', 'TRAIN|TEST') \endverbatim
\arg \b del_last_features \verbatim sg('del_last_features', 'TRAIN|TEST') \endverbatim
\arg \b convert \verbatim sg('convert', 'TRAIN|TEST', from_class, from_type, to_class, to_type[, order, start, gap, reversed]) \endverbatim
\arg \b reshape \verbatim sg('reshape', 'TRAIN|TEST, num_feat, num_vec) \endverbatim
\arg \b load_labels \verbatim sg('load_labels', filename, 'TRAIN|TARGET') \endverbatim
\arg \b set_labels \verbatim sg('set_labels', 'TRAIN|TEST', labels) \endverbatim
\arg \b get_labels \verbatim [labels]=sg('get_labels', 'TRAIN|TEST') \endverbatim

\section Kernel_sec Kernel
\arg \b set_kernel_normalization \verbatim sg('set_kernel_normalization', IDENTITY|AVGDIAG|SQRTDIAG|FIRSTELEMENT|VARIANCE, size[, kernel-specific parameters]) \endverbatim
\arg \b set_kernel \verbatim sg('set_kernel', type, size[, kernel-specific parameters]) \endverbatim
\arg \b add_kernel \verbatim sg('add_kernel', weight, kernel-specific parameters) \endverbatim
\arg \b del_last_kernel \verbatim sg('del_last_kernel') \endverbatim
\arg \b init_kernel \verbatim sg('init_kernel', 'TRAIN|TEST') \endverbatim
\arg \b clean_kernel \verbatim sg('clean_kernel') \endverbatim
\arg \b save_kernel \verbatim sg('save_kernel', filename, 'TRAIN|TEST') \endverbatim
\arg \b get_kernel_matrix \verbatim [K]]=sg('get_kernel_matrix', ['TRAIN|TEST') \endverbatim
\arg \b set_WD_position_weights \verbatim sg('set_WD_position_weights', W[, 'TRAIN|TEST']) \endverbatim
\arg \b get_subkernel_weights \verbatim [W]=sg('get_subkernel_weights') \endverbatim
\arg \b set_subkernel_weights \verbatim sg('set_subkernel_weights', W) \endverbatim
\arg \b set_subkernel_weights_combined \verbatim sg('set_subkernel_weights_combined', W, idx) \endverbatim
\arg \b get_dotfeature_weights_combined \verbatim [W]=sg('get_dotfeature_weights_combined', 'TRAIN|TEST') \endverbatim
\arg \b set_dotfeature_weights_combined \verbatim sg('set_dotfeature_weights_combined', W, idx) \endverbatim
\arg \b set_last_subkernel_weights \verbatim sg('set_last_subkernel_weights', W) \endverbatim
\arg \b get_WD_position_weights \verbatim [W]=sg('get_WD_position_weights') \endverbatim
\arg \b get_last_subkernel_weights \verbatim [W]=sg('get_last_subkernel_weights') \endverbatim
\arg \b compute_by_subkernels \verbatim [W]=sg('compute_by_subkernels') \endverbatim
\arg \b init_kernel_optimization \verbatim sg('init_kernel_optimization') \endverbatim
\arg \b get_kernel_optimization \verbatim [W]=sg('get_kernel_optimization') \endverbatim
\arg \b delete_kernel_optimization \verbatim sg('delete_kernel_optimization') \endverbatim
\arg \b use_diagonal_speedup \verbatim sg('use_diagonal_speedup', '0|1') \endverbatim
\arg \b set_kernel_optimization_type \verbatim sg('set_kernel_optimization_type', 'FASTBUTMEMHUNGRY|SLOWBUTMEMEFFICIENT') \endverbatim
\arg \b set_solver \verbatim sg('set_solver', 'AUTO|CPLEX|GLPK|INTERNAL') \endverbatim
\arg \b set_constraint_generator \verbatim sg('set_constraint_generator', 'LIBSVM_ONECLASS|LIBSVM_MULTICLASS|LIBSVM|SVMLIGHT|LIGHT|GPBTSVM|MPDSVM|GNPPSVM|GMNPSVM') \endverbatim
\arg \b set_prior_probs \verbatim sg('set_prior_probs', 'pos probs, neg_probs') \endverbatim
\arg \b set_prior_probs_from_labels \verbatim sg('set_prior_probs_from_labels', 'labels') \endverbatim
\arg \b resize_kernel_cache \verbatim sg('resize_kernel_cache', size) \endverbatim

\section Distance_sec Distance
\arg \b set_distance \verbatim sg('set_distance', type, data type[, distance-specific parameters]) \endverbatim
\arg \b init_distance \verbatim sg('init_distance', 'TRAIN|TEST') \endverbatim
\arg \b get_distance_matrix \verbatim [D]=sg('get_distance_matrix') \endverbatim

\section Classifier_sec Classifier
\arg \b classify \verbatim [result]=sg('classify') \endverbatim
\arg \b svm_classify \verbatim [result]=sg('svm_classify') \endverbatim
\arg \b classify_example \verbatim [result]=sg('classify_example', feature_vector_index) \endverbatim
\arg \b svm_classify_example \verbatim [result]=sg('svm_classify_example', feature_vector_index) \endverbatim
\arg \b get_classifier \verbatim [bias, weights]=sg('get_classifier', [index in case of MultiClassSVM]) \endverbatim
\arg \b get_clustering \verbatim [radi, centers|merge_distances, pairs]=sg('get_clustering') \endverbatim
\arg \b new_svm \verbatim sg('new_svm', 'LIBSVM_ONECLASS|LIBSVM_MULTICLASS|LIBSVM|SVMLIGHT|LIGHT|SVMLIN|GPBTSVM|MPDSVM|GNPPSVM|GMNPSVM|SUBGRADIENTSVM|WDSVMOCAS|SVMOCAS|SVMSGD|SVMBMRM|SVMPERF|KERNELPERCEPTRON|PERCEPTRON|LIBLINEAR_LR|LIBLINEAR_L2|LDA|LPM|LPBOOST|SUBGRADIENTLPM|KNN') \endverbatim
\arg \b new_classifier \verbatim sg('new_classifier', 'LIBSVM_ONECLASS|LIBSVM_MULTICLASS|LIBSVM|SVMLIGHT|LIGHT|SVMLIN|GPBTSVM|MPDSVM|GNPPSVM|GMNPSVM|SUBGRADIENTSVM|WDSVMOCAS|SVMOCAS|SVMSGD|SVMBMRM|SVMPERF|KERNELPERCEPTRON|PERCEPTRON|LIBLINEAR_LR|LIBLINEAR_L2|LDA|LPM|LPBOOST|SUBGRADIENTLPM|KNN') \endverbatim
\arg \b new_regression \verbatim sg('new_regression', 'SVRLIGHT|LIBSVR|KRR') \endverbatim
\arg \b new_clustering \verbatim sg('new_clustering', 'KMEANS|HIERARCHICAL') \endverbatim
\arg \b load_classifier \verbatim [filename, type]=sg('load_classifier') \endverbatim
\arg \b save_classifier \verbatim sg('save_classifier', filename) \endverbatim
\arg \b get_num_svms \verbatim [number of SVMs in MultiClassSVM]=sg('get_num_svms') \endverbatim
\arg \b get_svm \verbatim [bias, alphas]=sg('get_svm', [index in case of MultiClassSVM]) \endverbatim
\arg \b set_svm \verbatim sg('set_svm', bias, alphas) \endverbatim
\arg \b set_linear_classifier \verbatim sg('set_linear_classifier', bias, w) \endverbatim
\arg \b get_svm_objective \verbatim [objective]=sg('get_svm_objective') \endverbatim
\arg \b compute_svm_primal_objective \verbatim [objective]=sg('compute_svm_primal_objective') \endverbatim
\arg \b compute_svm_dual_objective \verbatim [objective]=sg('compute_svm_dual_objective') \endverbatim
\arg \b compute_mkl_primal_objective \verbatim [objective]=sg('compute_mkl_primal_objective') \endverbatim
\arg \b compute_mkl_dual_objective \verbatim [objective]=sg('compute_mkl_dual_objective') \endverbatim
\arg \b compute_relative_mkl_duality_gap \verbatim [gap]=sg('compute_relative_mkl_duality_gap') \endverbatim
\arg \b compute_absolute_mkl_duality_gap \verbatim [gap]=sg('compute_absolute_mkl_duality_gap') \endverbatim
\arg \b do_auc_maximization \verbatim sg('do_auc_maximization', 'auc') \endverbatim
\arg \b set_perceptron_parameters \verbatim sg('set_perceptron_parameters', learnrate, maxiter) \endverbatim
\arg \b train_classifier \verbatim sg('train_classifier', [classifier-specific parameters]) \endverbatim
\arg \b train_regression \verbatim sg('train_regression') \endverbatim
\arg \b train_clustering \verbatim sg('train_clustering') \endverbatim
\arg \b svm_train \verbatim sg('svm_train', [classifier-specific parameters]) \endverbatim
\arg \b svm_test \verbatim sg('svm_test') \endverbatim
\arg \b svm_qpsize \verbatim sg('svm_qpsize', size) \endverbatim
\arg \b svm_max_qpsize \verbatim sg('svm_max_qpsize', size) \endverbatim
\arg \b svm_bufsize \verbatim sg('svm_bufsize', size) \endverbatim
\arg \b c \verbatim sg('c', C1[, C2]) \endverbatim
\arg \b svm_epsilon \verbatim sg('svm_epsilon', epsilon) \endverbatim
\arg \b svr_tube_epsilon \verbatim sg('svr_tube_epsilon', tube_epsilon) \endverbatim
\arg \b svm_nu \verbatim sg('svm_nu', nu) \endverbatim
\arg \b mkl_parameters \verbatim sg('mkl_parameters', weight_epsilon, C_MKL [, mkl_norm ]) \endverbatim
\arg \b svm_max_train_time \verbatim sg('svm_max_train_time', max_train_time) \endverbatim
\arg \b use_shrinking \verbatim sg('use_shrinking', enable_shrinking) \endverbatim
\arg \b use_batch_computation \verbatim sg('use_batch_computation', enable_batch_computation) \endverbatim
\arg \b use_linadd \verbatim sg('use_linadd', enable_linadd) \endverbatim
\arg \b svm_use_bias \verbatim sg('svm_use_bias', enable_bias) \endverbatim
\arg \b mkl_use_interleaved_optimization \verbatim sg('mkl_use_interleaved_optimization', enable_interleaved_optimization) \endverbatim
\arg \b krr_tau \verbatim sg('krr_tau', tau) \endverbatim

\section Preprocessors_sec Preprocessors
\arg \b add_preproc \verbatim sg('add_preproc', preproc[, preproc-specific parameters]) \endverbatim
\arg \b del_preproc \verbatim sg('del_preproc') \endverbatim
\arg \b attach_preproc \verbatim sg('attach_preproc', 'TRAIN|TEST', force) \endverbatim
\arg \b clean_preproc \verbatim sg('clean_preproc') \endverbatim

\section HMM_sec HMM
\arg \b new_hmm \verbatim sg('new_hmm', N, M) \endverbatim
\arg \b load_hmm \verbatim sg('load_hmm', filename) \endverbatim
\arg \b save_hmm \verbatim sg('save_hmm', filename[, save_binary]) \endverbatim
\arg \b get_hmm \verbatim [p, q, a, b]=sg('get_hmm') \endverbatim
\arg \b append_hmm \verbatim sg('append_hmm', p, q, a, b) \endverbatim
\arg \b append_model \verbatim sg('append_model', 'filename'[, base1, base2]) \endverbatim
\arg \b set_hmm \verbatim sg('set_hmm', p, q, a, b) \endverbatim
\arg \b set_hmm_as \verbatim sg('set_hmm_as', POS|NEG|TEST) \endverbatim
\arg \b chop \verbatim sg('chop', chop) \endverbatim
\arg \b pseudo \verbatim sg('pseudo', pseudo) \endverbatim
\arg \b load_defs \verbatim sg('load_defs', filename, init) \endverbatim
\arg \b hmm_classify \verbatim [result]=sg('hmm_classify') \endverbatim
\arg \b hmm_test \verbatim sg('hmm_test', output name[, ROC filename[, neglinear[, poslinear]]]) \endverbatim
\arg \b one_class_linear_hmm_classify \verbatim [result]=sg('one_class_linear_hmm_classify') \endverbatim
\arg \b one_class_hmm_test \verbatim sg('one_class_hmm_test', output name[, ROC filename[, linear]]) \endverbatim
\arg \b one_class_hmm_classify \verbatim [result]=sg('one_class_hmm_classify') \endverbatim
\arg \b one_class_hmm_classify_example \verbatim [result]=sg('one_class_hmm_classify_example', feature_vector_index) \endverbatim
\arg \b hmm_classify_example \verbatim [result]=sg('hmm_classify_example', feature_vector_index) \endverbatim
\arg \b output_hmm \verbatim sg('output_hmm') \endverbatim
\arg \b output_hmm_defined \verbatim sg('output_hmm_defined') \endverbatim
\arg \b hmm_likelihood \verbatim [likelihood]=sg('hmm_likelihood') \endverbatim
\arg \b likelihood \verbatim sg('likelihood') \endverbatim
\arg \b save_hmm_likelihood \verbatim sg('save_hmm_likelihood', filename[, save_binary]) \endverbatim
\arg \b get_viterbi_path \verbatim [path, likelihood]=sg('get_viterbi_path', dim) \endverbatim
\arg \b vit_def \verbatim sg('vit_def') \endverbatim
\arg \b vit \verbatim sg('vit') \endverbatim
\arg \b bw \verbatim sg('bw') \endverbatim
\arg \b bw_def \verbatim sg('bw_def') \endverbatim
\arg \b bw_trans \verbatim sg('bw_trans') \endverbatim
\arg \b linear_train \verbatim sg('linear_train') \endverbatim
\arg \b save_hmm_path \verbatim sg('save_hmm_path', filename[, save_binary]) \endverbatim
\arg \b convergence_criteria \verbatim sg('convergence_criteria', num_iterations, epsilon) \endverbatim
\arg \b normalize_hmm \verbatim sg('normalize_hmm', [keep_dead_states]) \endverbatim
\arg \b add_states \verbatim sg('add_states', states, value) \endverbatim
\arg \b permutation_entropy \verbatim sg('permutation_entropy', width, seqnum) \endverbatim
\arg \b relative_entropy \verbatim [result]=sg('relative_entropy') \endverbatim
\arg \b entropy \verbatim [result]=sg('entropy') \endverbatim
\arg \b set_feature_matrix \verbatim sg('set_feature_matrix', features) \endverbatim
\arg \b set_feature_matrix_sparse \verbatim sg('set_feature_matrix_sparse', sp1, sp2) \endverbatim
\arg \b new_plugin_estimator \verbatim sg('new_plugin_estimator', pos_pseudo, neg_pseudo) \endverbatim
\arg \b train_estimator \verbatim sg('train_estimator') \endverbatim
\arg \b test_estimator \verbatim sg('test_estimator') \endverbatim
\arg \b plugin_estimate_classify_example \verbatim [result]=sg('plugin_estimate_classify_example', feature_vector_index) \endverbatim
\arg \b plugin_estimate_classify \verbatim [result]=sg('plugin_estimate_classify') \endverbatim
\arg \b set_plugin_estimate \verbatim sg('set_plugin_estimate', emission_probs, model_sizes) \endverbatim
\arg \b get_plugin_estimate \verbatim [emission_probs, model_sizes]=sg('get_plugin_estimate') \endverbatim

\section Structure_sec Structure
\arg \b best_path \verbatim sg('best_path', from, to) \endverbatim
\arg \b best_path_2struct \verbatim [prob, path, pos]=sg('best_path_2struct', p, q, cmd_trans, seq, pos, genestr, penalties, penalty_info, nbest, content_weights, segment_sum_weights) \endverbatim
\arg \b set_plif_struct \verbatim sg('set_plif_struct', id, name, limits, penalties, transform, min_value, max_value, use_cache, use_svm) \endverbatim
\arg \b get_plif_struct \verbatim [id, name, limits, penalties, transform, min_value, max_value, use_cache, use_svm]=sg('get_plif_struct') \endverbatim
\arg \b precompute_subkernels \verbatim sg('precompute_subkernels') \endverbatim
\arg \b precompute_content_svms \verbatim sg('precompute_content_svms', sequence, position_list, weights) \endverbatim
\arg \b get_lin_feat \verbatim [lin_feat]=sg('get_lin_feat') \endverbatim
\arg \b set_lin_feat \verbatim sg('set_lin_feat', lin_feat) \endverbatim
\arg \b init_dyn_prog \verbatim sg('init_dyn_prog', num_svms) \endverbatim
\arg \b init_intron_list \verbatim sg('init_intron_list', start_positions, end_positions, quality) \endverbatim
\arg \b precompute_tiling_features \verbatim sg('precompute_tiling_features', intensities, probe_pos, tiling_plif_ids) \endverbatim
\arg \b long_transition_settings \verbatim sg('long_transition_settings', use_long_transitions, threshold, max_len) \endverbatim
\arg \b set_model \verbatim sg('set_model', content_weights, transition_pointers, use_orf, mod_words) \endverbatim
\arg \b best_path_trans \verbatim [prob, path, pos]=sg('best_path_trans', p, q, nbest, seq_path, a_trans, segment_loss) \endverbatim
\arg \b best_path_trans_deriv \verbatim [p_deriv, q_deriv, cmd_deriv, penalties_deriv, my_scores, my_loss]=sg('best_path_trans_deriv', , my_path, my_pos, p, q, cmd_trans, seq, pos, genestr, penalties, state_signals, penalty_info, dict_weights, mod_words [, segment_loss, segmend_ids_mask]) \endverbatim

\section POIM_sec POIM
\arg \b compute_poim_wd \verbatim [W]=sg('compute_poim_wd', max_order, distribution) \endverbatim
\arg \b get_SPEC_consensus \verbatim [W]=sg('get_SPEC_consensus') \endverbatim
\arg \b get_SPEC_scoring \verbatim [W]=sg('get_SPEC_scoring', max_order) \endverbatim
\arg \b get_WD_consensus \verbatim [W]=sg('get_WD_consensus') \endverbatim
\arg \b get_WD_scoring \verbatim [W]=sg('get_WD_scoring', max_order) \endverbatim

\section Utility_sec Utility
\arg \b crc \verbatim [crc32]=sg('crc', string) \endverbatim
\arg \b ! \verbatim sg('!', system_command) \endverbatim
\arg \b exit \verbatim sg('exit') \endverbatim
\arg \b quit \verbatim sg('quit') \endverbatim
\arg \b exec \verbatim sg('exec', filename) \endverbatim
\arg \b set_output \verbatim sg('set_output', 'STDERR|STDOUT|filename') \endverbatim
\arg \b set_threshold \verbatim sg('set_threshold', threshold) \endverbatim
\arg \b init_random \verbatim sg('init_random', value_to_initialize_RNG_with) \endverbatim
\arg \b threads \verbatim sg('threads', num_threads) \endverbatim
\arg \b translate_string \verbatim [translation]=sg('translate_string', string, order, start) \endverbatim
\arg \b clear \verbatim sg('clear') \endverbatim
\arg \b tic \verbatim sg('tic') \endverbatim
\arg \b toc \verbatim sg('toc') \endverbatim
\arg \b print \verbatim sg('print', msg) \endverbatim
\arg \b echo \verbatim sg('echo', level) \endverbatim
\arg \b loglevel \verbatim sg('loglevel', 'ALL|DEBUG|INFO|NOTICE|WARN|ERROR|CRITICAL|ALERT|EMERGENCY') \endverbatim
\arg \b syntax_highlight \verbatim sg('syntax_highlight', 'ON|OFF') \endverbatim
\arg \b progress \verbatim sg('progress', 'ON|OFF') \endverbatim
\arg \b get_version \verbatim [version]=sg('get_version') \endverbatim
\arg \b help \verbatim sg('help') \endverbatim
\arg \b whos \verbatim sg('whos') \endverbatim
\arg \b run_python \verbatim [results]=sg('run_python', 'Var1', Var1, 'Var2', Var2,..., python_function) \endverbatim
\arg \b run_octave \verbatim [results]=sg('run_octave', 'Var1', Var1, 'Var2', Var2,..., octave_function) \endverbatim
\arg \b run_r \verbatim [results]=sg('run_r', 'Var1', Var1, 'Var2', Var2,..., r_function) \endverbatim

*/
