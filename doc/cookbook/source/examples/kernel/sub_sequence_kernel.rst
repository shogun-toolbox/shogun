=========================
String Subsequence Kernel
=========================

The String Subsequence Kernel (SSK) is discussed by :cite:`lodhi2002ssk`.

A subsequence is any ordered sequence of :math:`n` characters occurring in
the text, though not necessarily contiguous.

More formally, string :math:`u` is a subsequence of string :math:`s`, :math:`iff` there
exists indices :math:`\mathbf{i}=(i_{1},\dots,i_{|u|})`, with
:math:`1\le i_{1} \le \cdots \le i_{|u|} \le |s|`, such that
:math:`u_{j}=s_{i_{j}}` for :math:`j=1,\dots,|u|`, written as :math:`u=s[\mathbf{i}]`.

The feature mapping :math:`\phi` in this scenario is given by

:math:`\phi_{u}(s)=\sum_{\mathbf{i}:u=s[\mathbf{i}]}\lambda^{l(\mathbf{i})}`
for some :math:`lambda\le 1`,
where :math:`l(\mathbf{i})` is the length of the
subsequence in :math:`s`, given by :math:`i_{|u|}-i_{1}+1`.

The kernel here is an inner product in the feature space generated by all
subsequences of length :math:`n`.

:math:`K_{n}(s,t)=\sum_{u\in\Sigma^{n}}\langle \phi_{u}(s), \phi_{u}(t)\rangle = \
\sum_{u\in\Sigma^{n}}\sum_{\mathbf{i}:u=s[\mathbf{i}]} \
\sum_{\mathbf{j}:u=t[\mathbf{j}]}\lambda^{l(\mathbf{i})+l(\mathbf{j})}`

Since the subsequences are weighted by the exponentially decaying factor
:math:`\lambda` of their full length in the text, more weight is given to those
occurrences that are nearly contiguous.

A direct computation is infeasible
since the dimension of the feature space grows exponentially with :math:`n`.

The paper describes an efficient computation approach using a dynamic
programming technique.
 
-------
Example
-------

We start by creating

----------
References
----------
:wiki:`String_kernel`

.. bibliography:: ../../references.bib
    :filter: docname in docnames
